#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -*- Mode: Python; py-indent-offset: 4 -*-
# vim: tabstop=4 shiftwidth=4 expandtab

# weather-extension-configurator: 
# configures gnome-shell-extension-weather by simon04
# Copyright (C) 2011 Simon Legner
#
# based on a configurator for system-monitor-extension by Florian Mounier aka paradoxxxzero

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Author: Simon Legner aka simon04
# original version of: Igor Ingultsov aka inv, aka invy

"""
gnome-shell-weather-extension-config
Tool for editing gnome-shell-weather-extension-config preference as
an alternative of dconf-editor
"""

from gi.repository import Gtk, Gio, Gdk
import gettext

class WeatherConfigurator:

    def keypress(self, widget, event):
        if event.keyval == 65307: #Gtk.keysyms.Escape:
            Gtk.main_quit()

    def add_tooltip(self, item, tt):
        def tooltip(item, x, y, key_mode, tooltip):
            tooltip.set_text(tt)
            return True
        if tt:
            item.set_has_tooltip(True)
            item.connect('query-tooltip', tooltip)

    def add_label(self, label, tooltip):
        label = Gtk.Label(label + ":")
        label.set_alignment(1, 0.5)
        self.add_tooltip(label, tooltip)
        self.elements.append(label)

    def add_text(self, key, label, tooltip=None):
        def set(tb):
            self.schema.set_string(key, tb.get_text())
        entry = Gtk.Entry()
        entry.set_text(self.schema.get_string(key))
        entry.connect('activate', set)
        entry.connect('focus-out-event', lambda x, y: set(x))
        self.add_tooltip(entry, tooltip)
        self.add_label(label, tooltip)
        self.elements.append(entry)

    def add_double(self, key, label, tooltip=None):
        def set(tb):
            self.schema.set_double(key, float(tb.get_text()))
        entry = Gtk.Entry()
        entry.set_text(str(self.schema.get_double(key)))
        entry.connect('activate', set)
        entry.connect('focus-out-event', lambda x, y: set(x))
        self.add_tooltip(entry, tooltip)
        self.add_label(label, tooltip)
        self.elements.append(entry)

    def add_int(self, key, label, tooltip=None):
        def set(tb):
            self.schema.set_int(key, int(tb.get_text()))
        entry = Gtk.Entry()
        entry.set_text(str(self.schema.get_int(key)))
        entry.connect('activate', set)
        entry.connect('focus-out-event', lambda x, y: set(x))
        self.add_tooltip(entry, tooltip)
        self.add_label(label, tooltip)
        self.elements.append(entry)

    def add_filechooser(self, key, label, tooltip=None):
        def choosefile(tb, pos, event):
            filechooser = Gtk.FileChooserDialog(label, self.window, Gtk.FileChooserAction.OPEN)
            filechooser.add_button(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
            filechooser.add_button(Gtk.STOCK_OK, Gtk.ResponseType.OK)
            filefilter = Gtk.FileFilter();
            filefilter.add_mime_type('audio/*');
            filechooser.add_filter(filefilter);
            if filechooser.run() == Gtk.ResponseType.OK:
                tb.set_text(filechooser.get_filename())
                self.schema.set_string(key, filechooser.get_filename())
            filechooser.destroy()

        entry = Gtk.Entry()
        entry.set_text(self.schema.get_string(key))
        entry.set_icon_from_stock(Gtk.EntryIconPosition.PRIMARY, Gtk.STOCK_OPEN)
        #entry.connect('activate', set)
        entry.connect('icon-press', choosefile)
        self.add_tooltip(entry, tooltip)
        self.add_label(label, tooltip)
        self.elements.append(entry)

    def add_radio(self, key, label, items, tooltip=None):
        def set(rb):
            self.schema.set_enum(key, (rb.get_active())+1)
        vbox = Gtk.VBox()
        active = self.schema.get_enum(key)
        combo = Gtk.ComboBoxText()
        for (idx,item) in enumerate(items,1):
            combo.append_text(item)

        combo.set_active(active-1)
        combo.connect('changed', set)
        vbox.add(combo)

        self.add_label(label, tooltip)
        self.elements.append(vbox)

    def add_check(self, key, label, tooltip=None):
        def set(cb):
            self.schema.set_boolean(key, cb.get_active())
        button = Gtk.CheckButton(None)
        active = self.schema.get_boolean(key)
        button.set_active(active)
        button.connect('toggled', set)
        self.add_tooltip(button, tooltip)
        self.add_label(label, tooltip)
        self.elements.append(button)

    def __init__(self):
        self.schema = Gio.Settings('org.gnome.shell.extensions.islamic-datetime')
        keys = self.schema.keys()

        self.window = Gtk.Window(title=_("Gnome Shell: Islamic Date/Time Configurator"))
        self.window.connect('destroy', Gtk.main_quit)
        self.window.connect('key-press-event', self.keypress)

        self.elements = []

        self.add_double('longitude', _("Longitude"), _("Set the locations longitude"))
        self.add_double('latitude', _("Latitude"), _("Set the locations latitude"))
        self.add_double('gmt-diff', _("Time zone"), _("Set the locations timezone"))
        self.add_radio('method', _("Calculation method"),
                       [_("Egyptian General Authority of Survey"),
                        _("University of Islamic Sciences, Karachi (Shaf\'i)"),
                        _("University of Islamic Sciences, Karachi (Hanafi)"),
                        _("Islamic Society of North America"),
                        _("Muslim World League"),
                        _("Umm Al-Qurra"),
                        _("Fixed Ishaa Interval (always 90)"),
                        _("Egyptian General Authority of Survey (Egypt)")],
                       _("Choose the prayer time calculation method"))
        self.add_check('dst', _("DST"), _("Enable DST"))
        self.add_filechooser('azan-file', _("Azan audio file"), _("Audio file to play azan"))
        self.add_int('hijri-fix', _("Hijri date correction"), _("Manual correction for Hijri date calculation"))

        table = Gtk.Table(rows=len(self.elements)/2, columns=2, homogeneous=False)
        for (idx,el) in enumerate(self.elements):
            row = idx / 2
            col = idx % 2
            table.attach(el, col, col+1, row, row+1)
            table.set_row_spacing(row, 20)
            table.set_col_spacing(col, 10)
        self.window.add(table)

        self.window.set_border_width(20)
        self.window.show_all()

def main():
    gettext.install('islamic-datetime')
    WeatherConfigurator()
    Gtk.main()

if __name__ == '__main__':
    main()
